
import { useState } from "react";
import { Copy, FileDown, Send, Download } from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";

interface RetroItem {
  id: string;
  text: string;
  author: string;
  votes: number;
  lane: 'went-well' | 'didnt-go-well' | 'ideas';
}

interface EndRetroDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onConfirm: () => void;
  retroData: {
    title: string;
    items: RetroItem[];
    participants: number;
  };
}

const EndRetroDialog = ({ open, onOpenChange, onConfirm, retroData }: EndRetroDialogProps) => {
  const [sendToTeams, setSendToTeams] = useState(false);
  
  // Generate summary (mock implementation)
  const generateSummary = () => {
    const wentWell = retroData.items.filter(item => item.lane === 'went-well');
    const didntGoWell = retroData.items.filter(item => item.lane === 'didnt-go-well');
    const ideas = retroData.items.filter(item => item.lane === 'ideas').sort((a, b) => b.votes - a.votes);

    return `# ${retroData.title} - Summary

## 📊 **Overview**
- **Participants:** ${retroData.participants}
- **Total Items:** ${retroData.items.length}
- **Date:** ${new Date().toLocaleDateString()}

## ✅ **What Went Well** (${wentWell.length} items)
${wentWell.map(item => `- ${item.text}`).join('\n')}

## ⚠️ **What Didn't Go Well** (${didntGoWell.length} items)
${didntGoWell.map(item => `- ${item.text}`).join('\n')}

## 💡 **Action Items & Ideas** (${ideas.length} items)
${ideas.map(item => `- ${item.text} ${item.votes > 0 ? `(${item.votes} votes)` : ''}`).join('\n')}

## 🎯 **Key Takeaways**
- Focus on continuing successful practices from "What Went Well"
- Address critical issues identified in "What Didn't Go Well"
- Prioritize top-voted ideas for next sprint planning

---
*Generated by TasksMate Retrospective Tool*`;
  };

  const summary = generateSummary();

  const handleCopyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(summary);
      console.log("Summary copied to clipboard!");
    } catch (err) {
      console.error("Failed to copy summary:", err);
    }
  };

  const handleExportPDF = () => {
    // Mock PDF export
    console.log("Exporting to PDF...");
  };

  const handleSendToTeams = () => {
    if (sendToTeams) {
      console.log("Sending summary to Teams...");
    }
  };

  const handleConfirm = () => {
    handleSendToTeams();
    onConfirm();
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-hidden flex flex-col">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            End Retrospective
            <Badge variant="outline" className="bg-amber-100 text-amber-700">
              Draft → Archived
            </Badge>
          </DialogTitle>
        </DialogHeader>

        <div className="flex-1 overflow-y-auto space-y-4">
          <div>
            <Label className="text-sm font-medium">Generated Summary</Label>
            <Textarea
              value={summary}
              readOnly
              className="mt-2 min-h-[300px] bg-gray-50 text-sm font-mono"
            />
          </div>

          <div className="space-y-4 border-t pt-4">
            <h4 className="font-medium">Export Options</h4>
            
            <div className="space-y-3">
              <Button
                variant="outline"
                onClick={handleCopyToClipboard}
                className="w-full justify-start"
              >
                <Copy className="w-4 h-4 mr-2" />
                Copy to Clipboard
              </Button>

              <Button
                variant="outline"
                onClick={handleExportPDF}
                className="w-full justify-start"
              >
                <FileDown className="w-4 h-4 mr-2" />
                Export PDF
              </Button>

              <div className="flex items-center space-x-2">
                <Switch
                  id="teams-toggle"
                  checked={sendToTeams}
                  onCheckedChange={setSendToTeams}
                />
                <Label htmlFor="teams-toggle" className="flex items-center gap-2">
                  <Send className="w-4 h-4" />
                  Send to Teams Channel
                </Label>
              </div>
            </div>
          </div>
        </div>

        <DialogFooter className="border-t pt-4">
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button onClick={handleConfirm} className="bg-green-500 hover:bg-green-600">
            End Retrospective
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default EndRetroDialog;
